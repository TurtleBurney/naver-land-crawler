"""revise model schema

Revision ID: 799ff9e1cef0
Revises: d56e3cf310de
Create Date: 2021-03-23 01:40:56.662877

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "799ff9e1cef0"
down_revision = "d56e3cf310de"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "areatype",
        sa.Column("created_datetime", sa.DateTime(), nullable=False),
        sa.Column("modified_datetime", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("area_name", sa.String(length=16), nullable=False),
        sa.Column("shared_area", sa.Float(), nullable=False),
        sa.Column("exclusive_area", sa.Float(), nullable=False),
        sa.Column("building_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["building_id"], ["building.id"], name="building_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_areatype_building_id"), "areatype", ["building_id"], unique=False
    )
    op.create_index(
        op.f("ix_areatype_created_datetime"),
        "areatype",
        ["created_datetime"],
        unique=False,
    )
    op.create_table(
        "household",
        sa.Column("created_datetime", sa.DateTime(), nullable=False),
        sa.Column("modified_datetime", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("dong", sa.Integer(), nullable=True),
        sa.Column("floor", sa.Integer(), nullable=True),
        sa.Column("ho", sa.String(length=32), nullable=True),
        sa.Column("window_side", sa.String(length=32), nullable=True),
        sa.Column("building_id", sa.Integer(), nullable=False),
        sa.Column("areatype_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["areatype_id"], ["areatype.id"], name="areatype_fkey", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["building_id"], ["building.id"], name="building_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_household_areatype_id"), "household", ["areatype_id"], unique=False
    )
    op.create_index(
        op.f("ix_household_building_id"), "household", ["building_id"], unique=False
    )
    op.create_index(
        op.f("ix_household_created_datetime"),
        "household",
        ["created_datetime"],
        unique=False,
    )

    op.add_column("building", sa.Column("built_year", sa.Integer(), nullable=True))
    op.add_column("building", sa.Column("total_dong", sa.Integer(), nullable=True))
    op.add_column("building", sa.Column("total_household", sa.Integer(), nullable=True))
    op.drop_index("ix_building_province_id", table_name="building")
    op.drop_constraint("province_fkey", "building", type_="foreignkey")
    op.drop_column("building", "province_id")
    op.drop_column("building", "dong")
    op.drop_column("building", "window_side")
    op.drop_column("building", "max_floor")
    op.drop_column("building", "ho")
    op.drop_column("building", "exclusive_area")
    op.drop_column("building", "shared_area")
    op.drop_column("building", "floor")
    op.add_column("contract", sa.Column("household_id", sa.Integer(), nullable=False))
    op.drop_index("ix_contract_building_id", table_name="contract")
    op.create_index(
        op.f("ix_contract_household_id"), "contract", ["household_id"], unique=False
    )
    op.drop_constraint("building_fkey", "contract", type_="foreignkey")
    op.create_foreign_key(
        "household_fkey",
        "contract",
        "household",
        ["household_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("contract", "tnant_upper")
    op.drop_column("contract", "building_id")
    op.drop_column("contract", "tnant_lower")
    op.drop_index("ix_province_created_datetime", table_name="province")
    op.drop_table("province")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "province",
        sa.Column(
            "created_datetime",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "modified_datetime",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("sido", sa.VARCHAR(length=32), autoincrement=False, nullable=True),
        sa.Column("gugun", sa.VARCHAR(length=32), autoincrement=False, nullable=True),
        sa.Column(
            "eupmyeondong", sa.VARCHAR(length=32), autoincrement=False, nullable=True
        ),
        sa.Column("dongli", sa.VARCHAR(length=32), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="province_pkey"),
    )
    op.create_index(
        "ix_province_created_datetime", "province", ["created_datetime"], unique=False
    )
    op.add_column(
        "contract",
        sa.Column("tnant_lower", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "contract",
        sa.Column("building_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "contract",
        sa.Column("tnant_upper", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.drop_constraint("household_fkey", "contract", type_="foreignkey")
    op.create_foreign_key(
        "building_fkey",
        "contract",
        "building",
        ["building_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_contract_household_id"), table_name="contract")
    op.create_index(
        "ix_contract_building_id", "contract", ["building_id"], unique=False
    )
    op.drop_column("contract", "household_id")
    op.add_column(
        "building", sa.Column("floor", sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "building",
        sa.Column(
            "shared_area",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "building",
        sa.Column(
            "exclusive_area",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "building",
        sa.Column("ho", sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    )
    op.add_column(
        "building",
        sa.Column("max_floor", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "building",
        sa.Column(
            "window_side", sa.VARCHAR(length=64), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "building",
        sa.Column("dong", sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    )
    op.add_column(
        "building",
        sa.Column("province_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        "province_fkey",
        "building",
        "province",
        ["province_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_index(
        "ix_building_province_id", "building", ["province_id"], unique=False
    )
    op.drop_column("building", "total_household")
    op.drop_column("building", "total_dong")
    op.drop_column("building", "built_year")
    op.drop_index(op.f("ix_household_created_datetime"), table_name="household")
    op.drop_index(op.f("ix_household_building_id"), table_name="household")
    op.drop_index(op.f("ix_household_areatype_id"), table_name="household")
    op.drop_table("household")
    op.drop_index(op.f("ix_areatype_created_datetime"), table_name="areatype")
    op.drop_index(op.f("ix_areatype_building_id"), table_name="areatype")
    op.drop_table("areatype")
    # ### end Alembic commands ###
